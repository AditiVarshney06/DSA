leetcode --34
class Solution {
    public int firsts(int nums[],int t){
        int ans=-1;
        int start=0,end=nums.length-1;
        int mid=start+(end-start)/2;
        while(start<=end){
            if(nums[mid]==t){
                ans=mid;
                end=mid-1;
            }
            else if(nums[mid]>t)
                end=mid-1;
            else
              start=mid+1;
            mid=start+(end-start)/2;
        }
        return ans;
    }
    public int lasts(int nums[],int t){
        int ans=-1;
        int start=0,end=nums.length-1;
        int mid=start+(end-start)/2;
        while(start<=end){
            if(nums[mid]==t){
                ans=mid;
                start=mid+1;
            }
            else if(nums[mid]>t)
                end=mid-1;
            else
              start=mid+1;
            mid=start+(end-start)/2;
        }
        return ans;
    }
    public int[] searchRange(int[] nums, int t) {
        int ans[] = new int[] {-1,-1};
       
        ans[0]=firsts(nums,t);
        ans[1]=lasts(nums,t);
    return ans;
    }
}


